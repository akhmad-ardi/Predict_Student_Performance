# -*- coding: utf-8 -*-
"""Predict_Student_Performance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/akhmad-ardi/Predict_Student_Performance/blob/main/Predict_Student_Performance.ipynb

# Predict Student Performance

## Import Libraries and Load Data
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns
from sklearn.metrics import mean_squared_error, r2_score

import kagglehub

# Download latest version
path = kagglehub.dataset_download("stealthtechnologies/predict-student-performance-dataset")

print("Path to dataset files:", path)

df = pd.read_csv(f"{path}/data.csv")

df

"""## Exploratory Data Analysis(EDA)

1. Apa saja jenis variabel pada dataset?
2. Bagaimana distribusi variabel dalam dataset?
3. Apakah ada missing value?
4. Apakah ada fitur yang tidak berguna (redundant)?
5. Bagaimana korelasi antara fitur dan target?

### Jenis Variabel
"""

df.info()

"""Jenis Variabel:
- Socioeconomic Score: Numerik kontinu (skor antara 0 dan 1).
- Study Hours: Numerik kontinu (dalam jam).
- Sleep Hours: Numerik kontinu (dalam jam).
- Attendance (%): Numerik kontinu (persentase kehadiran).
- Grades: Numerik kontinu (nilai akhir).
"""

df.dtypes

"""### Distribusi Variabel"""

df.describe()

"""Distribusi Variabel:
- Socioeconomic Score:
  - Rentang: 0.10385–0.99982.
  - Distribusi relatif merata dengan beberapa outlier (misalnya, 0.99982).

- Study Hours:
  - Rentang: 0.8–10 jam.
  - Beberapa siswa belajar sangat sedikit (misalnya, 0.8 jam) atau sangat lama (10 jam).

- Sleep Hours:
  - Rentang: 4.8–10 jam.
  - Mayoritas tidur 5–9 jam.
- Attendance (%):
  - Rentang: 40–100%.
  - Terdapat siswa dengan kehadiran sempurna (100%) dan yang sangat rendah (40%).
- Grades:
  - Rentang: 32–91.
  - Nilai tertinggi (91) dan terendah (32) menunjukkan variasi signifikan.

### Miss Value
"""

df.isnull().sum()

"""Tidak ada miss value

### Outliers
"""

plt.figure(figsize=(15, 10))

for i, col in enumerate(df.columns):
    plt.subplot(2, 3, i + 1)
    sns.boxplot(y=df[col])
    plt.title(f'Boxplot of {col}')

plt.tight_layout()
plt.show()

"""Setelah menghapus outliers, ukuran dataset 1342 rows

### Duplicates
"""

duplicates = df[df.duplicated()]
print(f"Duplicate Rows: {duplicates}")

"""### Univariate Analysis"""

df.hist(bins=50, figsize=(20,15))

plt.show()

"""### Multivariate Analysis"""

sns.pairplot(df, diag_kind = 'kde')

plt.figure(figsize=(10, 8))
correlation_matrix = df.corr().round(2)

# Untuk print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""## Data Preparation

### Delete outliers
"""

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR=Q3-Q1
cleaned_df=df[~((df<(Q1-1.5*IQR))|(df>(Q3+1.5*IQR))).any(axis=1)]

# Cek ukuran dataset setelah drop outliers
cleaned_df.shape

"""### Remove unnecessary variables

Sleep Hours memiliki korelasi yang sangat lemah (-0.08) dengan Grades. Jadi Variabel Sleep Hours tidak dibutuhkan.
"""

df.drop(['Sleep Hours'], inplace=True, axis=1)

df.head()

"""### Split dataset"""

from sklearn.model_selection import train_test_split

X = cleaned_df.drop(["Grades"],axis =1)
y = cleaned_df["Grades"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 123)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""### Standarization"""

from sklearn.preprocessing import StandardScaler

features = ['Socioeconomic Score', 'Study Hours', 'Attendance (%)']
scaler = StandardScaler()
scaler.fit(X_train[features])
X_train[features] = scaler.transform(X_train.loc[:, features])
X_train[features].head()

X_train[features].describe().round(4)

"""## Model

### Linear Regression
"""

from sklearn.linear_model import LinearRegression

LR = LinearRegression()
LR.fit(X_train, y_train)

"""### KNN"""

from sklearn.neighbors import KNeighborsRegressor

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)

"""### Random Forest"""

from sklearn.ensemble import RandomForestRegressor

RF = RandomForestRegressor(n_estimators=100, max_depth=32, random_state=110, n_jobs=-1)
RF.fit(X_train, y_train)

"""### Boosting Algorithm"""

from sklearn.ensemble import AdaBoostRegressor

boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)
boosting.fit(X_train, y_train)

"""## Evaluasi Model"""

# Lakukan scaling terhadap fitur numerik pada X_test sehingga memiliki rata-rata=0 dan varians=1
X_test.loc[:, features] = scaler.transform(X_test[features])

# Variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['LR', 'KNN','RF','Boosting'])
r2 = pd.DataFrame(columns=['train', 'test'], index=['LR', 'KNN', 'RF', 'Boosting'])

# Dictionary untuk setiap algoritma yang digunakan
model_dict = {'LR': LR, 'KNN': knn, 'RF': RF, 'Boosting': boosting}

# Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    predict_train=model.predict(X_train)
    predict_test=model.predict(X_test)

    mse_train = mean_squared_error(y_true=y_train, y_pred=predict_train)/1e3
    mse_test = mean_squared_error(y_true=y_test, y_pred=predict_test)/1e3

    mse.loc[name, 'train'] = f"{mse_train * 100:.2f}%"
    mse.loc[name, 'test'] = f"{mse_test * 100:.2f}%"

    r2_train = r2_score(y_true=y_train, y_pred=predict_train)
    r2_test = r2_score(y_true=y_test, y_pred=predict_test)

    r2.loc[name, 'train'] = f"{r2_train * 100:.2f}%"
    r2.loc[name, 'test'] = f"{r2_test * 100:.2f}%"

mse

r2

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""Model Random Forest (RF) memberikan nilai error yang paling kecil. Sedangkan model dengan algoritma Linear Regression memiliki error yang paling besar (berdasarkan grafik, angkanya di atas 0.016)"""

prediksi = X_test.iloc[:10].copy()
pred_dict = {'y_true':y_test[:10]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)